---
title: "Client Report - Project 3 - Finding Relationships in Baseball"
subtitle: "Course DS 250"
author: "Adam Ulrich"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---


## Elevator pitch

_This is an exploration of Sean Lahman's baseball database. We look at players who attended BYU-I, at batting averages across individual years as well as across career, and we compare the number of wins per dollar spent for the Seattle Mariners against the Los Angeles Dodgers._


```{python}
#| label: libraries
#| code-summary: set up imports

# set up imports
import pandas as pd
import numpy as np
import plotly.express as px
import sqlite3
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# create connection to db
sqlite_file = 'lahmansbaseballdb.sqlite'
con = sqlite3.connect(sqlite_file)
```

## Task 1 - BYU-Idaho baseball players
__Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.__

```{python}
#| label: Task 1
#| code-summary: create a df for players that attended byu-i

# load data
query = """
Select DISTINCT p.playerID, c.schoolID, s.salary, s.yearID, s.teamID
from people p 
left join salaries s 
	on p.playerID = s.PlayerID 
join collegeplaying c 
	on p.playerID = c.playerID 
where c.schoolID = 'idbyuid'
order by salary DESC
"""
results = pd.read_sql_query(query,con)

# show data
results
```
_3 people from BYU-Idaho played MLB. Troy Cate is of note, and appears to have had one at bat, so he likely had a minor league contract. Minor leaguers get paid a prorated amount of league minimum for the days they are active and on the roster, regardless of playing time, games appeared in, or number of games during the time they were on the roster. The prorated amount is somewhere between 1/180 and 1/190 of league minimum per day, depending on the length of the season._


## Task 2 - Batting Average Queries
__This three-part question requires you to calculate batting average (number of hits divided by the number of at-bats)__

__a. Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.__

```{python}
#| label: Task 2a
#| code-summary: highest single year averages alphabetical top 5

# load data
query = """
Select playerID, yearid as year, H as Hits, AB as 'At_Bats' from batting where AB >= 1
"""
results = pd.read_sql_query(query,con)

# calculate average
results['Batting_Average'] = results['Hits']/results['At_Bats']

# sort data
results.sort_values(by=["Batting_Average","playerID"], ascending=[False,True], inplace=True)

total_perfect = results.query("Batting_Average == 1").playerID.count()

print(f"Total with a perfect batting average: {total_perfect}")

# show data
results.head(5).style.format({
  'Batting_Average':'{:.3f}'},
  ).hide(axis='index')

```
_Unsurprisingly there have been many people that have had a single at bat and have a perfect 1.000 batting average. In fact, it has happened 480 times in this data set._

__b. Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.__

```{python}
#| label: Task 2b
#| code-summary: highest single year averages AB >= 10 alphabetical top 5 

# load the data
query = """
Select playerID, yearid as year, H as Hits, AB as 'At_Bats' from batting where AB >= 10
"""
results = pd.read_sql_query(query,con)

# calculate average
results['Batting_Average'] = results['Hits']/results['At_Bats']

# sort data
results.sort_values(by=["Batting_Average","playerID"], ascending=[False,True], inplace=True)

# show data
results.head(5).style.format({
  'Batting_Average':'{:.3f}'},
  ).hide(axis='index')
```
_Increasing the minimum at bats to 10 quickly gets us away from perfect batting averages. It is not uncommon for a player to hit exceptionally well for a short period of time, but the law of averages tends to catch up to them, and they tend to revert closer to the mean. In this case, .643 has been the ceiling for 10 at-bats over a season._

_Certainly, hitters have had higher batting averages over short periods. Last year, Julio Rodriguez had a 4 game stretch where he went 17 for 22 (.773) from Aug 16 to Aug 19. If a player was having this much success over a 10 at bat period, either they got hurt or they were a late season call up, because they would have likely been given more playing time due to the short term success._


__c. Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results.__

```{python}
#| label: Task 2c
#| code-summary: highest lifetime batting averages >= 100 abs

#load the data
query = """
Select playerID, SUM(H) as total_hits, SUM(AB) as total_at_bats
from batting 
group by playerID 
having SUM(AB) >= 100
"""
results = pd.read_sql_query(query,con)

# create the average column
results['lifetime_average'] = results['total_hits']/results['total_at_bats']

# sort the data
results.sort_values(by=["lifetime_average","playerID"], ascending=[False,True], inplace=True)

# show the data
results.head(5).style.format({
  'lifetime_average':'{:.3f}'},
  ).hide(axis='index')
```
_Unsurprisingly, Ty Cobb, Roger Hornsby, and Shoeless Joe Jackson were in the top 5 all time batting average leaders. What is surprising is that the database includes the National Association from 1871 to 1875, which played by slightly different rules, until they National Association became the National League in 1876. 2 players from that National Association era were standouts with the bat: [Ross Barnes](https://en.wikipedia.org/wiki/Ross_Barnes) and [Levi Meyerle](https://en.wikipedia.org/wiki/Levi_Meyerle)._

_Barnes was 3x NA/NL batting champion from 1872-1876, and led the league in hits, run, doubles, triples and stolen bases mutliple times. He leveraged a cast iron home plate and the ability to hit the ball off the plate and cause it to bounce foul. Rules during that period were that the ball was in play (today if the ball goes foul before it reaches 1st base or 3rd base, it is a foul ball). In 1877, the rules were changed and this was no longer a fair ball. In addition, he was quite ill in 1877, and played only 22 games. Whether the rule change or his illness was the larger impact, Barnes never hit .300 in his remaining career._

_The reason that Ross Barnes did not win the NA batting championship in 1871 was Levi Meyerle hit an incredible .492 for the season, eclipsing Barnes .401 average. Meyerle was not great defensively, but he hit below .300 only once in his 7 year career._

## Task 3 - Compare two teams success vs cost
__Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Plotly Express to visualize the comparison. What do you learn?__


```{python}
#| label: Task 3
#| code-summary: Read data and display scatter plot

query = """
select s.teamID as team, s.yearID as year, SUM(salary) as total_salary, t.W as wins
from salaries s
join teams t on s.teamID = t.teamID and s.yearid = t.yearID
group by s.yearID, s.teamID
having s.yearid >= 2007 and s.teamID in ('SEA','LAN')
order by team
"""

# get data from db
results = pd.read_sql_query(query,con)

# calculate dollars per win
results['Dollars Per Win'] = results['total_salary']/results['wins']

# create go plot to combine subplots
fig = make_subplots(specs=[[{"secondary_y": True}]], x_title="Year")

# go unfortunately isn't as useful at handling multiple columns, so you have to break the data apart.
results_sea = results.query("team == 'SEA'")
results_lan = results.query("team == 'LAN'")

# add the bar charts
fig.add_trace(go.Bar(x=results_sea.year, y=results_sea.wins, name='Mariners Wins', marker_color="RGBA(0, 128, 128, .4)", yaxis="y2",), secondary_y=False)
fig.add_trace(go.Bar(x=results_lan.year, y=results_lan.wins, name='Dodgers Wins', marker_color='RGBA(0,0,255,.6)', yaxis="y2",), secondary_y=False)
fig.update_layout(barmode='group')
fig.update_yaxes(title_text="Total Wins", secondary_y=False)

# add the line charts
fig.add_trace(go.Line(x=results_sea.year, y=results_sea.total_salary, yaxis="y", name="Mariners Payroll", marker_color="teal",line=dict(width=5)), secondary_y=True) 
fig.add_trace(go.Line(x=results_lan.year, y=results_lan.total_salary, yaxis="y", name="Dodgers Payroll",marker_color="blue", line=dict(width=5)), secondary_y=True)
fig.update_yaxes(title_text="Total Payroll", secondary_y=True)

# show the combined chart
fig.update_layout(title='Wins and Total Payroll: Mariners vs Dodgers (2007-2016)')

fig.show()

#create the dollars per win chart.
dollars_per_win_chart = px.line(results,x='year', y='Dollars Per Win', color='team', 
                                title="Dollars spent per win: Mariners vs Dodgers (2007-2016)", 
                                color_discrete_map={
                                "LAN": "blue",
                                "SEA": "teal"} ,
                                render_mode="webg1")

# change legend labels
newnames = {"SEA": "Mariners $/win", "LAN": "Dodgers $/win"}
dollars_per_win_chart.for_each_trace(lambda t: t.update(name = newnames[t.name]))

#add annotation
dollars_per_win_chart.add_annotation(x=2012,y=1100000,
  text='2012: Dodgers Purchased by Guggenheim Baseball Management',  bgcolor='RGBA(0,0,255,.2)',ay=-250, ax=-150,
  arrowsize=1,arrowhead=1, arrowcolor='RGBA(0,0,255,.2)',arrowwidth=2,
  standoff=15
  )


#change line width and show
dollars_per_win_chart.update_traces(line={'width':5})
dollars_per_win_chart.show()
```
_I chose the Seattle Mariners and the Los Angeles Dodgers. Generally speaking, minor to middle increases in payroll did not have a direct correlation with increased win totals. The only excecption to this is when the Dodgers doubled their payroll between 2012 and 2013, and this doubled payroll sustained 5 to 8 additional wins per yer. Since 2013, the Mariners have spent $0.8M to $1.2M less per win._

_The obvious question is, why did the Dodgers change the amount they were spending in 2012. The Dodgers were purchased in 2012 and the new management had a completely different approach to payroll. They have continued the higher level of investment do this date. The increase has allowed the Dodgers to reach the playoffs in 11 straight seasons, and have won 50 playoff games during that time._
